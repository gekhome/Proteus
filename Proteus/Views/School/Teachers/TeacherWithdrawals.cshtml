@using Proteus.DAL;
@using Proteus.Models;


@{
    ViewBag.Title = "Αποχωρήσεις εκπαιδευτών";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 11px;
    }
</style>

<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Αποχωρήσεις εκπαιδευτικών</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <span style="margin:5px 5px 5px 10px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Εκτύπωση", "WithdrawalsPrint", "School", null, new { @class = "btn btn-primary", style = "font-size:14px", target = "_blank" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

    <div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">

        @(Html.Kendo().Grid<TeacherWithdrawalViewModel>()
        .Name("grid")
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Navigatable()
        .Filterable()
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(440))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ΣΧΟΛΙΚΟ_ΕΤΟΣ, (IEnumerable<SYS_SCHOOLYEARS>)ViewData["schoolyears"], "SY_ID", "SY_TEXT").Width(12);
            columns.ForeignKey(f => f.TEACHER_ID, (IEnumerable<qryTEACHER_SELECTOR>)ViewData["teachers"], "TEACHER_ID", "ΟΝΟΜΑΤΕΠΩΝΥΜΟ").Width(34);
            columns.Bound(c => c.ΗΜΕΡΟΜΗΝΙΑ).Width(16).Groupable(false);
            columns.ForeignKey(f => f.ΑΙΤΙΟΛΟΓΙΑ, (IEnumerable<ΑΠΟΧΩΡΗΣΗ_ΑΙΤΙΕΣ>)ViewData["aities"], "ΑΠΟΧΩΡΗΣΗ_ΚΩΔΙΚΟΣ", "ΑΠΟΧΩΡΗΣΗ_ΑΙΤΙΑ").Width(60);            
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(32);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΑΠΟΧΩΡΗΣΗ_ΚΩΔ);
                model.Field(p => p.TEACHER_ID).DefaultValue((int)ViewData["defaultTeacher"]);
                model.Field(p => p.ΣΧΟΛΙΚΟ_ΕΤΟΣ).DefaultValue((int)ViewData["defaultSchoolYear"]);
                model.Field(p => p.ΑΙΤΙΟΛΟΓΙΑ).DefaultValue((int)ViewData["defaultAitia"]);
            })
            .Create(create => create.Action("Apoxorisi_Create", "School"))
            .Read(read => read.Action("Apoxorisi_Read", "School"))
            .Update(update => update.Action("Apoxorisi_Update", "School"))
            .Destroy(delete => delete.Action("Apoxorisi_Destroy", "School"))
        )
        )
</div>

<script>

    function RefreshGrid(e) {
        var grid = $("#grid").data("kendoGrid");
        grid.dataSource.read();
    }

</script>

