@using Proteus.DAL;
@using Proteus.Models;


@{
    ViewBag.Title = "Βεβαιώσεις ανάληψης";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 12px;
    }
</style>

<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Βεβαιώσεις ανάληψης καθηκόντων</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-primary" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

    <div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">

        @(Html.Kendo().Grid<TeacherAnalipsiViewModel>()
        .Name("analipseis")
        .Navigatable()
        .Filterable()
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(440))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.PERIOD_ID, (IEnumerable<ΠΕΡΙΟΔΟΙ>)ViewData["periodoi"], "PERIOD_ID", "ΠΕΡΙΟΔΟΣ").Width(12).EditorTemplateName("PeriodId");
            columns.ForeignKey(f => f.TEACHER_ID, (IEnumerable<sqlTEACHERS_IN_PERIODS>)ViewData["teachers"], "TEACHER_ID", "ΟΝΟΜΑΤΕΠΩΝΥΜΟ").Width(40).EditorTemplateName("PeriodTeacherId");
            columns.Bound(c => c.ΠΡΩΤΟΚΟΛΛΟ).Width(12).Groupable(false);
            columns.Bound(c => c.ΗΜΕΡΟΜΗΝΙΑ).Width(14);            
            columns.Bound(c => c.ΥΠΕΓΡΑΦΗ).Width(12).ClientTemplate("<input type='checkbox' #=ΥΠΕΓΡΑΦΗ ? checked='checked' : '' # ></input>").Groupable(false);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(34);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("TeacherAnalipsiPrint", "School") + "?analipsiId=#=ΑΝΑΛΗΨΗ_ΚΩΔ#' target = _blank><span class=\"k-icon k-justifyFull\"></span>Εκτύπωση</a>"
            ).Width(16);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΑΝΑΛΗΨΗ_ΚΩΔ);
                model.Field(p => p.PERIOD_ID).DefaultValue(0);
                model.Field(p => p.TEACHER_ID).DefaultValue(0);
                model.Field(p => p.ΥΠΕΓΡΑΦΗ).DefaultValue(true);                                                
            })
            .Create(create => create.Action("TeacherAnalipsi_Create", "School"))
            .Read(read => read.Action("TeacherAnalipsi_Read", "School"))
            .Update(update => update.Action("TeacherAnalipsi_Update", "School"))
            .Destroy("TeacherAnalipsi_Destroy", "School")
        )
    )

</div>

<script>

    function filterTeachers() {
        var periodID = $("#PERIOD_ID").data("kendoDropDownList").value();
        return {
            periodId: periodID
        };
    }

    function RefreshGrid(e) {
        var grid = $("#analipseis").data("kendoGrid");
        grid.dataSource.read();
    }

</script>

