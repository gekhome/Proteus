@model IEnumerable<Proteus.Models.TeacherBebeoseisViewModel>
@using Proteus.DAL;
@using Proteus.Models;


@{
    ViewBag.Title = "Βεβαιώσεις προϋπηρεσίας";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 12px;
    }
</style>

@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Βεβαιώσεις προϋπηρεσίας εκπαιδευτικών</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px">
    @(Html.Kendo().Grid<TeacherInfoViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΑΦΜ).Width(12).Groupable(false);
            columns.Bound(c => c.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Width(38).Groupable(false)
                .ClientFooterTemplate("Συνολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.KLADOS_NAME).Width(12);
            columns.Bound(c => c.EIDIKOTITA_TEXT).Width(70);
        })
        .Selectable()
        .Groupable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Filterable()
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(220))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.TEACHER_ID);
            })
            .Read(read => read.Action("TeacherInfo_Read", "School"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Count();
            })
            )
            .Events(events => events.Change("change"))

    )  @* --- data grid ---*@
</div>


<div class="body-content" style="margin:5px 30px 5px 30px">

        @(Html.Kendo().Grid(Model)
        .Name("Child")
        .Navigatable()
        .Filterable()
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .HtmlAttributes(new { style = "display: block;font-size:13px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(240))
        .Columns(columns =>
        {
            columns.Bound(c => c.ΠΡΩΤΟΚΟΛΛΟ).Width(16).Groupable(false);
            columns.Bound(c => c.ΗΜΕΡΟΜΗΝΙΑ).Width(20);
            columns.ForeignKey(f => f.ΣΧΟΛΙΚΟ_ΕΤΟΣ, (IEnumerable<SYS_SCHOOLYEARS>)ViewData["schoolyears"], "SY_ID", "SY_TEXT").Width(20);
            columns.Bound(c => c.ΠΑΡΑΔΟΔΗΚΕ).Width(20).ClientTemplate("<input type='checkbox' #=ΠΑΡΑΔΟΔΗΚΕ ? checked='checked' : '' # ></input>").Groupable(false);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(38);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("TeacherBebeosiEdit", "Programma") + "?bebeosiId=#=ΒΕΒΑΙΩΣΗ_ΚΩΔ#' target = _blank><span class=\"k-icon k-edit\"></span>Κείμενο</a>"
            ).Width(20);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΒΕΒΑΙΩΣΗ_ΚΩΔ);
                model.Field(p => p.ΠΑΡΑΔΟΔΗΚΕ).DefaultValue(true);
                model.Field(p => p.ΣΧΟΛΙΚΟ_ΕΤΟΣ).DefaultValue((int)ViewData["defaultSchoolYear"]);
            })
            .Create(create => create.Action("TeacherBebeosi_Create", "Programma").Data("data"))
            .Read(read => read.Action("TeacherBebeosi_Read", "Programma").Data("data"))
            .Update(update => update.Action("TeacherBebeosi_Update", "Programma").Data("data"))
            .Destroy(destroy => destroy.Action("TeacherBebeosi_Destroy", "Programma"))
            .Events(events => events.Error("error_handler"))                        
        )
        )

</div>

<script>

    function RefreshGrid(e) {
        var grid = $("#Child").data("kendoGrid");
        grid.dataSource.read();
    }

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var teacherID = dataItem.TEACHER_ID;

        $("#Child").data("kendoGrid").dataSource.read({ teacherId: teacherID });
        $("#Child").css("display", "block");
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        var teacherID = 0;
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            teacherID = dataItem.TEACHER_ID;
        }
        return { teacherId: teacherID };
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child").data("kendoGrid").dataSource.read();
    }

</script>

