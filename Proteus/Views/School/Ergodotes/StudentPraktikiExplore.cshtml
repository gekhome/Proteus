@using Proteus.DAL;
@using Proteus.Models;

@{
    ViewBag.Title = "Εξερεύνηση πρακτικής";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 10px;
    }
</style>

<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Εξερεύνηση μητρώου πρακτικής</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px">
        @(Html.Kendo().Grid<PraktikiExploreViewModel>()
        .Name("grid1")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Width(30).Groupable(false)
                .ClientFooterTemplate("Συνολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");;
            columns.ForeignKey(f => f.ΕΙΔΙΚΟΤΗΤΑ, (IEnumerable<viewIEK_EIDIKOTITES>)ViewData["eidikotitesIek"], "EIDIKOTITA_ID", "EIDIKOTITA_TEXT").Width(48);
            columns.ForeignKey(f => f.ΠΕΡΙΟΔΟΣ_ΚΩΔ, (IEnumerable<ΠΕΡΙΟΔΟΙ>)ViewData["periodoi"], "PERIOD_ID", "ΠΕΡΙΟΔΟΣ").Width(12);
            columns.ForeignKey(f => f.ΕΞΑΜΗΝΟ, (IEnumerable<SYS_TERM>)ViewData["terms"], "TERM_ID", "TERM").Width(10);
            columns.Bound(c => c.ΗΜΝΙΑ_ΑΠΟ).Width(14).Groupable(false);
            columns.Bound(c => c.ΗΜΝΙΑ_ΕΩΣ).Width(14).Groupable(false);
            columns.Bound(c => c.ΩΡΕΣ).Width(10).Filterable(false).Groupable(false);
            columns.Bound(c => c.ΕΡΓΟΔΟΤΗΣ_ΕΠΩΝΥΜΙΑ).Width(30);
            columns.Bound(c => c.ΠΡΑΚΤΙΚΗ_ΠΕΡΑΤΩΣΗ).Width(10).Title("Πέρας");
        })
        .Groupable()
        .HtmlAttributes(new { style = "display: block;font-size:11px" })
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(320))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(60)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΕΡΓ_ΠΡΑΚΤΙΚΗ_ΚΩΔ);         
            })            
            .Read(read => read.Action("PraktikiExplore_Read", "Ergodotes"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Count();
            })
            .Events(events => events.Error("error_handler"))            
            )
        )  @* --- data grid ---*@
</div>

<div class="body-content" style="margin:5px 30px 5px 30px;font-size:small">
    @(Html.Kendo().TabStrip()
        .Name("TabStrip")
        .SelectedIndex(0)
        .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
        .Items(items =>
        {
            items.Add().Text("Απαλλαγές πρακτικής").Content(@<text>

            @(Html.Kendo().Grid<PraktikiApallagiViewModel>()
            .Name("grid2")
            .Columns(columns =>
            {
                columns.Bound(o => o.ΑΜΚ).Width(10);
                columns.Bound(o => o.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Width(30);
                columns.ForeignKey(f => f.ΕΙΔΙΚΟΤΗΤΑ, (IEnumerable<viewIEK_EIDIKOTITES>)ViewData["eidikotitesIek"], "EIDIKOTITA_ID", "EIDIKOTITA_TEXT").Width(60).Groupable(true);
                columns.Bound(o => o.ΠΡΑΚΤΙΚΗ_ΣΧΟΛΙΟ).Width(40);
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .Read(read => read.Action("PraktikiApallagi_Read", "Ergodotes"))
            )
            .HtmlAttributes(new { style = "display: block;font-size:11px" })
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .Sortable()
            .Filterable()
            .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
            .Scrollable(scr => scr.Height(160))
            )
            </text>);
            items.Add().Text("Διακοπές πρακτικής").Content(@<text>

            @(Html.Kendo().Grid<PraktikiDiakopiViewModel>()
            .Name("grid3")
            .Columns(columns =>
            {
                columns.Bound(o => o.ΑΜΚ).Width(10);
                columns.Bound(o => o.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Width(30);
                columns.ForeignKey(f => f.ΕΙΔΙΚΟΤΗΤΑ, (IEnumerable<viewIEK_EIDIKOTITES>)ViewData["eidikotitesIek"], "EIDIKOTITA_ID", "EIDIKOTITA_TEXT").Width(60).Groupable(true);
                columns.Bound(o => o.ΠΡΑΚΤΙΚΗ_ΣΧΟΛΙΟ).Width(40);
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .Read(read => read.Action("PraktikiDiakopi_Read", "Ergodotes"))
            )
            .HtmlAttributes(new { style = "display: block;font-size:11px" })            
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .Sortable()
            .Filterable()
            .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
            .Scrollable(scr => scr.Height(160))
            )
            </text>);
        })
    )   @*-- Tabstrip ---*@
</div>

<script id="events" type="text/javascript">

    function RefreshGrid(e) {
        var grid = $("#grid1").data("kendoGrid");
        grid.dataSource.read();

    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
    }

</script>





