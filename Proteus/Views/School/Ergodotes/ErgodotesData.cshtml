@model IEnumerable<Proteus.Models.ErgodotesViewModel>
@using Proteus.DAL;
@using Proteus.Models;


@{
    ViewBag.Title = "Στοιχεία εργοδοτών";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 11px;
    }
</style>


<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Στοιχεία εργοδοτών και πρακτικής</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
        @(Html.Kendo().Grid(Model)
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΕΡΓΟΔΟΤΗΣ_ΑΦΜ).Width(12).Groupable(false);
            columns.Bound(c => c.ΕΡΓΟΔΟΤΗΣ_ΕΠΩΝΥΜΙΑ).Width(70).Groupable(false)
                .ClientFooterTemplate("Συνολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.ΥΠΕΥΘΥΝΟΣ).Width(30).Groupable(false);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(34);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("ErgodotesEdit", "Ergodotes") + "?ergodotisId=#=ΕΡΓΟΔΟΤΗΣ_ΚΩΔ#' target = _blank><span class=\"k-icon k-edit\"></span>Καρτέλα</a>"
            ).Width(18);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .HtmlAttributes(new { style="font-size:12px" })
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .Navigatable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Selectable()
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(300))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΕΡΓΟΔΟΤΗΣ_ΚΩΔ);
            })
            .Create(create => create.Action("Ergodotes_Create", "Ergodotes"))
            .Read(read => read.Action("Ergodotes_Read", "Ergodotes"))
            .Update(update => update.Action("Ergodotes_Update", "Ergodotes"))
            .Destroy(destroy => destroy.Action("Ergodotes_Destroy", "Ergodotes"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΕΡΓΟΔΟΤΗΣ_ΕΠΩΝΥΜΙΑ).Count();
            })
            .Events(events => events.Error("error_handler1"))
        )
        .Events(events => events.Change("change"))
        )
    </div>


    <div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">

    @(Html.Kendo().PanelBar()
    .Name("Panel1")
    .Items(items =>
    {
        items.Add()
            .Text("Πρακτική άσκηση")
            .Selected(false)
            .Expanded(true)
            .Content(
            @<text>

        @(Html.Kendo().Grid<ErgodotesPraktikiViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "font-size:13px" })
        .Navigatable()
        .Filterable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(260))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ΤΜΗΜΑ_ΚΩΔ, (IEnumerable<qryTMIMA_PRAKTIKI_SELECTOR>)ViewData["tmimata"], "ΤΜΗΜΑ_ΚΩΔ", "ΤΜΗΜΑ_ΟΝΟΜΑ").Width(20);
            columns.ForeignKey(f => f.ΜΑΘΗΤΗΣ_ΚΩΔ, (IEnumerable<qrySTUDENT_PRAKTIKI_SELECTOR>)ViewData["students"], "STUDENT_ID", "ΟΝΟΜΑΤΕΠΩΝΥΜΟ").Width(40).EditorTemplateName("PraktikiStudentId");            
            columns.Bound(c => c.ΗΜΝΙΑ_ΑΠΟ).Width(16);
            columns.Bound(c => c.ΗΜΝΙΑ_ΕΩΣ).Width(16);
            columns.Bound(c => c.ΩΡΕΣ).Width(16);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(34);
            columns.Bound(m => m.ΕΡΓΟΔΟΤΗΣ_ΚΩΔΙΚΟΣ).ClientTemplate("<a class=\"k-button k-button-icontext\" href='" + Url.Action("ErgodotesPraktikiEdit", "Ergodotes")
                                                                + "?praktikiId=#=ΕΡΓ_ΠΡΑΚΤΙΚΗ_ΚΩΔ#' target = _blank><span class=\"k-icon k-edit\"></span>Αντικείμενο</a>").Title("").Width(20);

        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΕΡΓ_ΠΡΑΚΤΙΚΗ_ΚΩΔ);
                model.Field(p => p.ΤΜΗΜΑ_ΚΩΔ).DefaultValue((int)ViewData["defaultTmima"]);
                model.Field(p => p.ΜΑΘΗΤΗΣ_ΚΩΔ).DefaultValue((int)ViewData["defaultStudent"]);
                model.Field(p => p.ΩΡΕΣ).DefaultValue(0);
                model.Field(p => p.ΕΡΓΟΔΟΤΗΣ_ΚΩΔΙΚΟΣ).Editable(false);
            })
            .Create(create => create.Action("Praktiki_Create", "Ergodotes").Data("data"))
            .Read(read => read.Action("Praktiki_Read", "Ergodotes").Data("data"))
            .Update(update => update.Action("Praktiki_Update", "Ergodotes").Data("data"))
            .Destroy("Praktiki_Destroy", "Ergodotes")
            .Events(events => events.Error("error_handler2"))
        )
        .Events(e => e.SaveChanges("onSave"))
        )
    </text>);
    })
    )

</div>

<script>
    function filterStudents() {
        return {
            tmima: $("#ΤΜΗΜΑ_ΚΩΔ").data("kendoDropDownList").value()
        };
    }
</script>

<script type="text/javascript">

    var options = null;

    function RefreshGrid(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();

    }

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var ergodotisID = dataItem.ΕΡΓΟΔΟΤΗΣ_ΚΩΔ;

        $("#Child").data("kendoGrid").dataSource.read({ ergodotisId: ergodotisID });
        $("#Child").css("display", "block");

        @*// 1st step: save grid state
        var grid = $("#Master").data("kendoGrid");
        var dataSource = grid.dataSource;

        var state = {
            //columns: grid.columns,
            page: dataSource.page(),
            pageSize: dataSource.pageSize(),
            sort: dataSource.sort(),
            filter: dataSource.filter(),
            group: dataSource.group()
        };

        $.ajax({
            url: '@Url.Action("Save", "Home")',
            data: { data: JSON.stringify(state) }
        });

        //alert("state:" + JSON.stringify(state));  // verifies

        // 2nd step: persist selected row
        var grid = $("#Master").data("kendoGrid");
        //alert("local storage: " + JSON.stringify(dataItem));  // verifies
        localStorage.setItem("selected-row", JSON.stringify(dataItem));*@
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { ergodotisId: dataItem.ΕΡΓΟΔΟΤΗΣ_ΚΩΔ };
        }
        else {
            return { ergodotisId: 0 };
        }
    }

    function Restore(e) {
        var grid = $("#Master").data("kendoGrid");
        var dataSource = grid.dataSource;
        //grid.dataSource.read(); // refresh grid - so button Refresh not required

        $.ajax({
            url: '@Url.Action("Load", "Home")',
            success: function (state) {
                state = JSON.parse(state);
                options = grid.options;

                //options.columns = state.columns;
                options.dataSource.page = state.page;
                options.dataSource.pageSize = state.pageSize;
                options.dataSource.sort = state.sort;
                options.dataSource.filter = state.filter;
                options.dataSource.group = state.group;

                grid.destroy();
                $("#Master").empty().kendoGrid(options);

                //alert("state:" + JSON.stringify(options.dataSource.page));    // verifies
            }
        });

        grid.wrapper.height(400);
        grid.resize();
    }

    function Reselect(e) {
        var grid = $("#Master").data("kendoGrid");
        var selectedRow = localStorage.getItem("selected-row");
        var rowToSelect = JSON.parse(selectedRow);
        var lineToSelect = null;

        var data = grid.dataSource.data();
        for (var i = 0; i < data.length; i++) {
            if (data[i].ΕΡΓΟΔΟΤΗΣ_ΚΩΔ == rowToSelect.ΕΡΓΟΔΟΤΗΣ_ΚΩΔ) {
                var select = grid.tbody.find('tr[data-uid="' + data[i].uid + '"]');
                //alert("var select: " + data[i].ΕΡΓΟΔΟΤΗΣ_ΚΩΔ);
                grid.select(select);
            }
        }
    }

    function onSave(e) {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var ergodotisID = 0;
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            ergodotisID = dataItem.ΕΡΓΟΔΟΤΗΣ_ΚΩΔ;
        }
        $("#Child").data("kendoGrid").dataSource.read({ ergodotisId: ergodotisID });
        $("#Child").css("display", "block");
    }


    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Master").data("kendoGrid").dataSource.read();
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child").data("kendoGrid").dataSource.read();
    }

</script>

