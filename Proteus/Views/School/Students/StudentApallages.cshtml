@model IEnumerable<Proteus.Models.StudentApallagiViewModel>
@using Proteus.DAL;
@using Proteus.Models;

@{
    ViewBag.Title = "Απαλλαγές μαθημάτων";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Απαλλαγές μαθημάτων σπουδαστών</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
    @(Html.Kendo().Grid<adkStudentInfoViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΑΜΚ).Width(10).Groupable(false);
            columns.Bound(c => c.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Width(30).Groupable(false)
                .ClientFooterTemplate("Συνολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.ForeignKey(f => f.EIDIKOTITA_ID, (IEnumerable<viewIEK_EIDIKOTITES>)ViewData["eidikotitesIek"], "EIDIKOTITA_ID", "EIDIKOTITA_TEXT").Width(80).Groupable(true);
        })
        .Selectable()
        .Groupable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Filterable()
        .HtmlAttributes(new { style = "font-size:12px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(320))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(60)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.STUDENT_ID);
            })
            .Read(read => read.Action("adkStudentInfo_Read", "School"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Count();
            })
            .Events(events => events.Error("error_handler1"))
            )
        .Events(events => events.Change("change"))

    )  @* --- data grid ---*@
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
    @(Html.Kendo().Grid<StudentApallagiViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display: block;font-size:13px" })
        .Navigatable()
        .Filterable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(220))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ΕΞΑΜΗΝΟ_ΚΩΔ, (IEnumerable<SYS_TERM>)ViewData["terms"], "TERM_ID", "TERM_TEXT").Width(20);
            columns.ForeignKey(f => f.ΜΑΘΗΜΑ_ΟΝΟΜΑ, (IEnumerable<adk_LESSON_NAMES>)ViewData["lessons"], "LESSON_TEXT", "LESSON_TEXT").Width(70).EditorTemplateName("ApallagiLesson").Groupable(false);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(30);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΜΑΠ_ΚΩΔ);
                model.Field(p => p.ΕΞΑΜΗΝΟ_ΚΩΔ).DefaultValue(1);
                model.Field(p => p.ΜΑΘΗΜΑ_ΟΝΟΜΑ).DefaultValue("");
            })
            .Create(create => create.Action("Apallagi_Create", "School").Data("data"))
            .Read(read => read.Action("Apallagi_Read", "School").Data("data"))
            .Update(update => update.Action("Apallagi_Update", "School").Data("data"))
            .Destroy(delete => delete.Action("Apallagi_Destroy", "School"))
            .Events(events => events.Error("error_handler2"))
        )
    )

</div>

<script type="text/javascript">

    function filterLessons() {
        var masterGrid = $("#Master").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var termID = $("#ΕΞΑΜΗΝΟ_ΚΩΔ").data("kendoDropDownList").value();

        if (dataItem && termID) {
            return { eidikotita: dataItem.EIDIKOTITA_ID, term: termID }
        }
        else {
            return { eidikotita: 0, term: 0 }
        };
    }

</script>

<script type="text/javascript">

        function change(e) {
            var dataItem = this.dataItem(this.select());
            var studentID = dataItem.STUDENT_ID;

            $("#Child").data("kendoGrid").dataSource.read({ studentId: studentID });
            $("#Child").css("display", "block");
        }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { studentId: dataItem.STUDENT_ID, eidikotitaId: dataItem.EIDIKOTITA_ID };
        }
        else {
            return { studentId: 0, eidikotita: 0 };
        }
    }

    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Master").data("kendoGrid").dataSource.read();
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child").data("kendoGrid").dataSource.read();
    }

</script>