@model IEnumerable<Proteus.Models.StudentAitisiViewModel>
@using Proteus.DAL;
@using Proteus.Models;


@{
    ViewBag.Title = "Αιτήσεις σπουδαστών";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 12px;
    }
</style>

<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Αιτήσεις σπουδαστών</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
    @(Html.Kendo().Grid<StudentInfoViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΑΜΚ).Width(10).Groupable(false);
            columns.Bound(c => c.ΟΝΟΜΑΤΕΠΩΝΥΜΟ).Width(40).Groupable(false);
            columns.Bound(c => c.ΑΦΜ).Width(12).Groupable(false);
            columns.Bound(c => c.ΑΜΚΑ).Width(14).Groupable(false);
            columns.Bound(c => c.EIDIKOTITA_TEXT).Width(70);
        })
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Selectable()
        .Groupable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(260))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(60)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.STUDENT_ID);
            })
            .Read(read => read.Action("StudentInfo_Read", "School"))
            )
        .Events(events => events.Change("change"))

    )  @* --- data grid ---*@
</div>

<div class="body-content" style="margin:5px 30px 5px 30px;">

    @(Html.Kendo().Grid(Model)
    .Name("Child")
    .Navigatable()
    .Filterable()
    .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
    .HtmlAttributes(new { style = "display: block;font-size:13px" })
    .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .Scrollable(scr => scr.Height(220))
    .Columns(columns =>
    {
        columns.Bound(c => c.ΠΡΩΤΟΚΟΛΛΟ).Width(18);
        columns.Bound(c => c.ΗΜΕΡΟΜΗΝΙΑ).Width(18);
        columns.Bound(c => c.ΥΠΟΒΛΗΘΗΚΕ).Width(16).ClientTemplate("<input type='checkbox' #=ΥΠΟΒΛΗΘΗΚΕ ? checked='checked' : '' # ></input>");
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(36);
        columns.Template(
            @<text></text>)
        .ClientTemplate(
        "<a class=\"k-button k-button-icontext\" href='" + Url.Action("StudentAitisiEdit", "School") + "?aitisiId=#=ΑΙΤΗΣΗ_ΚΩΔ#' target = _blank><span class=\"k-icon k-justifyFull\"></span>Εκτύπωση</a>"
        ).Width(16);

    })
    .ToolBar(toolBar =>
    {
        toolBar.Create();
    })
    .DataSource(ds => ds
        .Ajax()
        .Batch(false)
        .PageSize(40)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.ΑΙΤΗΣΗ_ΚΩΔ);
            model.Field(p => p.ΥΠΟΒΛΗΘΗΚΕ).DefaultValue(true);
        })
        .Create(create => create.Action("StudentAitisi_Create", "School").Data("data"))
        .Read(read => read.Action("StudentAitisi_Read", "School").Data("data"))
        .Update(update => update.Action("StudentAitisi_Update", "School").Data("data"))
        .Destroy(destroy => destroy.Action("StudentAitisi_Destroy", "School"))
        .Events(events => events.Error("error_handler"))            
    )
    )

</div>

<script type="text/javascript">

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var studentID = dataItem.STUDENT_ID;

        $("#Child").data("kendoGrid").dataSource.read({ studentId: studentID });
        $("#Child").css("display", "block");
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        var studentID = 0;
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            studentID = dataItem.STUDENT_ID;
        }
        return { studentId: studentID };
    }

    // NOT USED (13-11-2018)
    function filterStudents() {
        return {
            eidikotita: $("#ΕΙΔΙΚΟΤΗΤΑ").data("kendoDropDownList").value()
        };
    }

    function RefreshGrid(e) {
        var grid = $("#Child").data("kendoGrid");
        grid.dataSource.read();

    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGrid(e);
        }
    }

</script>

